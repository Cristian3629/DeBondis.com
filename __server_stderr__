==4470== Memcheck, a memory error detector
==4470== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==4470== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==4470== Command: ./server 1234 paradas.txt bondis.txt
==4470== 
Cliente conectado.
Comando A recibido.
Comando A recibido.
Cliente desconectado.
Cliente conectado.
Comando F recibido.
Comando F recibido.
Comando L recibido.
Comando R recibido.
Cliente desconectado.
==4470== Invalid read of size 8
==4470==    at 0x407174: std::thread::joinable() const (thread:170)
==4470==    by 0x40838C: AttendClient::join() (server_attend_client.cpp:91)
==4470==    by 0x40642A: WaitClient::~WaitClient() (server_wait_client.cpp:18)
==4470==    by 0x406458: WaitClient::~WaitClient() (server_wait_client.cpp:20)
==4470==    by 0x4034CA: Server::~Server() (server.cpp:34)
==4470==    by 0x40288D: main (server.cpp:162)
==4470==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==4470== 
==4470== 
==4470== Process terminating with default action of signal 11 (SIGSEGV)
==4470==  Access not within mapped region at address 0x8
==4470==    at 0x407174: std::thread::joinable() const (thread:170)
==4470==    by 0x40838C: AttendClient::join() (server_attend_client.cpp:91)
==4470==    by 0x40642A: WaitClient::~WaitClient() (server_wait_client.cpp:18)
==4470==    by 0x406458: WaitClient::~WaitClient() (server_wait_client.cpp:20)
==4470==    by 0x4034CA: Server::~Server() (server.cpp:34)
==4470==    by 0x40288D: main (server.cpp:162)
==4470==  If you believe this happened as a result of a stack
==4470==  overflow in your program's main thread (unlikely but
==4470==  possible), you can try to increase the size of the
==4470==  main thread stack using the --main-stacksize= flag.
==4470==  The main thread stack size used in this run was 8388608.
==4470== 
==4470== HEAP SUMMARY:
==4470==     in use at exit: 73,672 bytes in 14 blocks
==4470==   total heap usage: 102 allocs, 88 frees, 101,701 bytes allocated
==4470== 
==4470== LEAK SUMMARY:
==4470==    definitely lost: 0 bytes in 0 blocks
==4470==    indirectly lost: 0 bytes in 0 blocks
==4470==      possibly lost: 288 bytes in 1 blocks
==4470==    still reachable: 73,384 bytes in 13 blocks
==4470==         suppressed: 0 bytes in 0 blocks
==4470== Rerun with --leak-check=full to see details of leaked memory
==4470== 
==4470== For counts of detected and suppressed errors, rerun with: -v
==4470== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
